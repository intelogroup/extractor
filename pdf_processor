import PyPDF2
import re
from typing import Dict, Optional

def extract_pdf_info(pdf_file) -> Optional[Dict[str, str]]:
    try:
        reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        
        # Extract text from first two pages
        for i in range(min(2, len(reader.pages))):
            text += reader.pages[i].extract_text() + "\n"
            
        metadata = reader.metadata
        
        info = {
            'title': extract_title(text, metadata),
            'authors': extract_authors(text, metadata),
            'year': extract_year(text, metadata),
            'journal': extract_journal(text),
            'doi': extract_doi(text),
            'abstract': extract_abstract(text)
        }
        
        return {k: v for k, v in info.items() if v}  # Remove empty values
        
    except Exception as e:
        print(f"Error processing PDF: {e}")
        return None

def extract_title(text: str, metadata: dict) -> str:
    if metadata.get('/Title'):
        return metadata['/Title'].strip()
        
    lines = text.split('\n')
    for line in lines[:3]:  # Check first 3 lines
        if len(line.strip()) > 10 and not any(x in line.lower() for x in ['abstract', 'introduction', 'journal']):
            return line.strip()
    return ""

def extract_authors(text: str, metadata: dict) -> str:
    if metadata.get('/Author'):
        return metadata['/Author'].strip()
        
    patterns = [
        r'(?:Author[s]?:|by)\s*((?:[A-Z][a-z]+\s+[A-Z][a-z]+(?:,\s*|\s+and\s+|$))+)',
        r'(?:^|\n)([A-Z][a-z]+(?:\s+[A-Z][a-z]+)+(?:,\s*(?:[A-Z][a-z]+\s+[A-Z][a-z]+))*)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(1).strip()
    return ""

def extract_year(text: str, metadata: dict) -> str:
    if metadata.get('/CreationDate'):
        year_match = re.search(r'D:(\d{4})', metadata['/CreationDate'])
        if year_match:
            return year_match.group(1)
            
    # Look for year patterns
    patterns = [
        r'\b(19|20)\d{2}\b',  # Basic year
        r'Published.*?(\d{4})',  # Published year
        r'Â©.*?(\d{4})',  # Copyright year
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(1)
    return ""

def extract_journal(text: str) -> str:
    patterns = [
        r'(?:Journal|Conference):\s*(.*?)(?:\n|$)',
        r'(?:Published in|Appeared in)\s*(.*?)(?:\n|$)',
        r'(?:[A-Z][a-zA-Z\s&]+Journal|Conference)\s+\d+\s*\(\d+\)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip() if match.groups() else match.group(0).strip()
    return ""

def extract_doi(text: str) -> str:
    patterns = [
        r'(?:DOI:|doi:)?\s*(10\.\d{4,}/[-._;()/:\w]+)',
        r'https?://doi\.org/(10\.\d{4,}/[-._;()/:\w]+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1)
    return ""

def extract_abstract(text: str) -> str:
    patterns = [
        r'Abstract\s*\n+([^.]*(?:\.[^.]*){2,})',
        r'ABSTRACT\s*\n+([^.]*(?:\.[^.]*){2,})'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(1).strip()
    return ""
